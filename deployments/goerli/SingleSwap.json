{
  "address": "0xedB33B737Bc24E9dc1759cD1A06C38eec6519B66",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAIToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapExactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        }
      ],
      "name": "swapExactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xac3ef91899e812e7148c6c60cbb1d430743c7e552b70c97b8ea8abd68bd49c88",
  "receipt": {
    "to": null,
    "from": "0xB227673c8Fb86B8a9178d9E42A22fCF9321aFBBF",
    "contractAddress": "0xedB33B737Bc24E9dc1759cD1A06C38eec6519B66",
    "transactionIndex": 139,
    "gasUsed": "810893",
    "logsBloom": "0x
    "blockHash": "0x7f176ecb17fc083d310ed725c908e04f4d04a3708b5e07830e5c43452bae2a94",
    "transactionHash": "0xac3ef91899e812e7148c6c60cbb1d430743c7e552b70c97b8ea8abd68bd49c88",
    "logs": [],
    "blockNumber": 8031130,
    "cumulativeGasUsed": "29739396",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc3e4f5ea1ce06bf1337ba03f5d86f27",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAIToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"name\":\"swapExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/SingleSwap.sol\":\"SingleSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/SingleSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract SingleSwap {\\r\\n    address public constant routerAddress =\\r\\n        0xE592427A0AEce92De3Edee1F18E0157C05861564;\\r\\n    ISwapRouter public immutable swapRouter = ISwapRouter(routerAddress);\\r\\n\\r\\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\r\\n\\r\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    IERC20 public DAIToken = IERC20(DAI);\\r\\n\\r\\n    // For this example, we will set the pool fee to 0.3%.\\r\\n    uint24 public constant poolFee = 3000;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function swapExactInputSingle(\\r\\n        uint256 amountIn\\r\\n    ) external returns (uint256 amountOut) {\\r\\n        DAIToken.approve(address(swapRouter), amountIn);\\r\\n\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n            .ExactInputSingleParams({\\r\\n                tokenIn: WETH,\\r\\n                tokenOut: DAI,\\r\\n                fee: poolFee,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        amountOut = swapRouter.exactInputSingle(params);\\r\\n    }\\r\\n\\r\\n    function swapExactOutputSingle(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMaximum\\r\\n    ) external returns (uint256 amountIn) {\\r\\n        DAIToken.approve(address(swapRouter), amountInMaximum);\\r\\n\\r\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter\\r\\n            .ExactOutputSingleParams({\\r\\n                tokenIn: WETH,\\r\\n                tokenOut: DAI,\\r\\n                fee: poolFee,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp,\\r\\n                amountOut: amountOut,\\r\\n                amountInMaximum: amountInMaximum,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        amountIn = swapRouter.exactOutputSingle(params);\\r\\n\\r\\n        if (amountIn < amountInMaximum) {\\r\\n            DAIToken.approve(address(swapRouter), 0);\\r\\n            DAIToken.transfer(address(this), amountInMaximum - amountIn);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4541fd2b73663dd9ad65213a88db61d9a53680b3402bf0603e07316d69af7e60\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405273e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1660601b815250736b175474e89094c44da98b954eedeac495271d0f6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156100ae57600080fd5b5060805160601c610d4b6100e560003980610224528061037d528061044852806104ab528061060352806106f45250610d4b6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ad5c46481161005b578063ad5c464814610117578063c31c9c0714610135578063c4b69a1814610153578063e0bab4c41461018357610088565b8063089fe6aa1461008d57806326cdc909146100ab5780633268cc56146100c957806373bd43ad146100e7575b600080fd5b6100956101a1565b6040516100a29190610c00565b60405180910390f35b6100b36101a7565b6040516100c09190610b92565b60405180910390f35b6100d16101cb565b6040516100de9190610b25565b60405180910390f35b61010160048036038101906100fc91906108bd565b6101e3565b60405161010e9190610c1b565b60405180910390f35b61011f61042e565b60405161012c9190610b25565b60405180910390f35b61013d610446565b60405161014a9190610bad565b60405180910390f35b61016d6004803603810190610168919061090f565b61046a565b60405161017a9190610c1b565b60405180910390f35b61018b61083d565b6040516101989190610b25565b60405180910390f35b610bb881565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73e592427a0aece92de3edee1f18e0157c0586156481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610261929190610b69565b602060405180830381600087803b15801561027b57600080fd5b505af115801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b39190610894565b50600060405180610100016040528073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168152602001736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016103d49190610bc8565b602060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042691906108e6565b915050919050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b81526004016104e8929190610b69565b602060405180830381600087803b15801561050257600080fd5b505af1158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610894565b50600060405180610100016040528073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168152602001736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001858152602001848152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663db3e2198826040518263ffffffff1660e01b815260040161065a9190610be4565b602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac91906108e6565b9150828210156108365760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f000000000000000000000000000000000000000000000000000000000000000060006040518363ffffffff1660e01b8152600401610732929190610b40565b602060405180830381600087803b15801561074c57600080fd5b505af1158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190610894565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb308486036040518363ffffffff1660e01b81526004016107e2929190610b69565b602060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190610894565b505b5092915050565b736b175474e89094c44da98b954eedeac495271d0f81565b60008151905061086481610ce7565b92915050565b60008135905061087981610cfe565b92915050565b60008151905061088e81610cfe565b92915050565b6000602082840312156108a657600080fd5b60006108b484828501610855565b91505092915050565b6000602082840312156108cf57600080fd5b60006108dd8482850161086a565b91505092915050565b6000602082840312156108f857600080fd5b60006109068482850161087f565b91505092915050565b6000806040838503121561092257600080fd5b60006109308582860161086a565b92505060206109418582860161086a565b9150509250929050565b61095481610c36565b82525050565b61096381610c36565b82525050565b61097281610c8d565b82525050565b61098181610cb1565b82525050565b61099081610cd5565b82525050565b610100820160008201516109ad600085018261094b565b5060208201516109c0602085018261094b565b5060408201516109d36040850182610ae9565b5060608201516109e6606085018261094b565b5060808201516109f96080850182610b07565b5060a0820151610a0c60a0850182610b07565b5060c0820151610a1f60c0850182610b07565b5060e0820151610a3260e0850182610ada565b50505050565b61010082016000820151610a4f600085018261094b565b506020820151610a62602085018261094b565b506040820151610a756040850182610ae9565b506060820151610a88606085018261094b565b506080820151610a9b6080850182610b07565b5060a0820151610aae60a0850182610b07565b5060c0820151610ac160c0850182610b07565b5060e0820151610ad460e0850182610ada565b50505050565b610ae381610c54565b82525050565b610af281610c74565b82525050565b610b0181610c74565b82525050565b610b1081610c83565b82525050565b610b1f81610c83565b82525050565b6000602082019050610b3a600083018461095a565b92915050565b6000604082019050610b55600083018561095a565b610b626020830184610987565b9392505050565b6000604082019050610b7e600083018561095a565b610b8b6020830184610b16565b9392505050565b6000602082019050610ba76000830184610969565b92915050565b6000602082019050610bc26000830184610978565b92915050565b600061010082019050610bde6000830184610996565b92915050565b600061010082019050610bfa6000830184610a38565b92915050565b6000602082019050610c156000830184610af8565b92915050565b6000602082019050610c306000830184610b16565b92915050565b6000610c4182610c54565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b6000610c9882610c9f565b9050919050565b6000610caa82610c54565b9050919050565b6000610cbc82610cc3565b9050919050565b6000610cce82610c54565b9050919050565b6000610ce082610c83565b9050919050565b610cf081610c48565b8114610cfb57600080fd5b50565b610d0781610c83565b8114610d1257600080fd5b5056fea2646970667358221220c97c3a4ac20f9a07722e54a3d4afd17468aa73a94df2e05663208b4a2145731164736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ad5c46481161005b578063ad5c464814610117578063c31c9c0714610135578063c4b69a1814610153578063e0bab4c41461018357610088565b8063089fe6aa1461008d57806326cdc909146100ab5780633268cc56146100c957806373bd43ad146100e7575b600080fd5b6100956101a1565b6040516100a29190610c00565b60405180910390f35b6100b36101a7565b6040516100c09190610b92565b60405180910390f35b6100d16101cb565b6040516100de9190610b25565b60405180910390f35b61010160048036038101906100fc91906108bd565b6101e3565b60405161010e9190610c1b565b60405180910390f35b61011f61042e565b60405161012c9190610b25565b60405180910390f35b61013d610446565b60405161014a9190610bad565b60405180910390f35b61016d6004803603810190610168919061090f565b61046a565b60405161017a9190610c1b565b60405180910390f35b61018b61083d565b6040516101989190610b25565b60405180910390f35b610bb881565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73e592427a0aece92de3edee1f18e0157c0586156481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610261929190610b69565b602060405180830381600087803b15801561027b57600080fd5b505af115801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b39190610894565b50600060405180610100016040528073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168152602001736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016103d49190610bc8565b602060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042691906108e6565b915050919050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b81526004016104e8929190610b69565b602060405180830381600087803b15801561050257600080fd5b505af1158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610894565b50600060405180610100016040528073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168152602001736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001858152602001848152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663db3e2198826040518263ffffffff1660e01b815260040161065a9190610be4565b602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac91906108e6565b9150828210156108365760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f000000000000000000000000000000000000000000000000000000000000000060006040518363ffffffff1660e01b8152600401610732929190610b40565b602060405180830381600087803b15801561074c57600080fd5b505af1158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190610894565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb308486036040518363ffffffff1660e01b81526004016107e2929190610b69565b602060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190610894565b505b5092915050565b736b175474e89094c44da98b954eedeac495271d0f81565b60008151905061086481610ce7565b92915050565b60008135905061087981610cfe565b92915050565b60008151905061088e81610cfe565b92915050565b6000602082840312156108a657600080fd5b60006108b484828501610855565b91505092915050565b6000602082840312156108cf57600080fd5b60006108dd8482850161086a565b91505092915050565b6000602082840312156108f857600080fd5b60006109068482850161087f565b91505092915050565b6000806040838503121561092257600080fd5b60006109308582860161086a565b92505060206109418582860161086a565b9150509250929050565b61095481610c36565b82525050565b61096381610c36565b82525050565b61097281610c8d565b82525050565b61098181610cb1565b82525050565b61099081610cd5565b82525050565b610100820160008201516109ad600085018261094b565b5060208201516109c0602085018261094b565b5060408201516109d36040850182610ae9565b5060608201516109e6606085018261094b565b5060808201516109f96080850182610b07565b5060a0820151610a0c60a0850182610b07565b5060c0820151610a1f60c0850182610b07565b5060e0820151610a3260e0850182610ada565b50505050565b61010082016000820151610a4f600085018261094b565b506020820151610a62602085018261094b565b506040820151610a756040850182610ae9565b506060820151610a88606085018261094b565b506080820151610a9b6080850182610b07565b5060a0820151610aae60a0850182610b07565b5060c0820151610ac160c0850182610b07565b5060e0820151610ad460e0850182610ada565b50505050565b610ae381610c54565b82525050565b610af281610c74565b82525050565b610b0181610c74565b82525050565b610b1081610c83565b82525050565b610b1f81610c83565b82525050565b6000602082019050610b3a600083018461095a565b92915050565b6000604082019050610b55600083018561095a565b610b626020830184610987565b9392505050565b6000604082019050610b7e600083018561095a565b610b8b6020830184610b16565b9392505050565b6000602082019050610ba76000830184610969565b92915050565b6000602082019050610bc26000830184610978565b92915050565b600061010082019050610bde6000830184610996565b92915050565b600061010082019050610bfa6000830184610a38565b92915050565b6000602082019050610c156000830184610af8565b92915050565b6000602082019050610c306000830184610b16565b92915050565b6000610c4182610c54565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b6000610c9882610c9f565b9050919050565b6000610caa82610c54565b9050919050565b6000610cbc82610cc3565b9050919050565b6000610cce82610c54565b9050919050565b6000610ce082610c83565b9050919050565b610cf081610c48565b8114610cfb57600080fd5b50565b610d0781610c83565b8114610d1257600080fd5b5056fea2646970667358221220c97c3a4ac20f9a07722e54a3d4afd17468aa73a94df2e05663208b4a2145731164736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 158,
        "contract": "contracts/interfaces/SingleSwap.sol:SingleSwap",
        "label": "DAIToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)139"
      }
    ],
    "types": {
      "t_contract(IERC20)139": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}